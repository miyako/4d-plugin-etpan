#ifndef __CHARSET_H__#define __CHARSET_H__ 1#include "4DPluginAPI.h"#include "shiftjis.h"#include "iso2022jp.h"#include "windows31j.h"#include "utf8.h"#include <stdio.h>#include <string.h>#ifdef __cplusplusextern "C" {#endif		#define MAX_LINE_LENGTH_FOR_HEADER 78	#define HEADER_ENCODING_YIELD_SIZE 0x2000		typedef std::vector<unsigned short> CJISString;	typedef std::basic_string<PA_Unichar> CUTF16String;		void charset_encode_header(CJISString& chars,/* jis */														 const char *encoding,														 const char *header_name,														 CUTF16String& src,														 CUTF8String& address,														 CUTF8String& result);		void convert_to_windows_31j(CUTF16String& src, CUTF8String& dst);	void convert_to_windows_31j_header(const char *header_name,																		 CUTF16String& src,																		 CUTF8String& address,																		 CUTF8String& result);		void convert_to_shift_jis(CUTF16String& src, CUTF8String& dst);	void convert_to_shift_jis_header(const char *header_name,																		 CUTF16String& src,																		 CUTF8String& address,																		 CUTF8String& result);		void convert_to_iso_2022_jp(CUTF16String& src, CUTF8String& dst);		//quoted-printable (for subject)	void convert_to_iso_2022_jp_header(const char *header_name,																		 CUTF16String& src,																		 CUTF8String& address,																		 CUTF8String& result);	//base64 (for rcpt)	void convert_to_iso_2022_jp_header_b(const char *header_name,																			 CUTF16String& src,																			 CUTF8String& address,																			 CUTF8String& result);	void convert_to_utf8_header(const char *header_name,															CUTF8String& src,															CUTF8String& address,															CUTF8String& result);#ifdef __cplusplus}#endif#endif