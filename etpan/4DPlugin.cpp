/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : etpan
 #	author : miyako
 #	2017/03/29
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
			// --- SMTP
			
		case 1 :
			etpan_smtp_send(pResult, pParams);
			break;
			
	}
}

#pragma mark Convert

void convert_subject_iso_2022_jp(CUTF8String& mime_subject)
{
	C_TEXT temp;
	CUTF16String u16;
	CUTF8String address = (const uint8_t *)"";
	
	temp.setUTF8String(&mime_subject);
	temp.copyUTF16String(&u16);

	convert_to_iso_2022_jp_header("Subject", u16, address, mime_subject);
}

void convert_subject_shift_jis(CUTF8String& mime_subject)
{
	C_TEXT temp;
	CUTF16String u16;
	CUTF8String address = (const uint8_t *)"";
	
	temp.setUTF8String(&mime_subject);
	temp.copyUTF16String(&u16);
	
	convert_to_shift_jis_header("Subject", u16, address, mime_subject);
}

void convert_subject_windows_31j(CUTF8String& mime_subject)
{
	C_TEXT temp;
	CUTF16String u16;
	CUTF8String address = (const uint8_t *)"";
	
	temp.setUTF8String(&mime_subject);
	temp.copyUTF16String(&u16);
	
	convert_to_windows_31j_header("Subject", u16, address, mime_subject);
}

void convert_subject_utf8(CUTF8String& mime_subject)
{
	CUTF8String address = (const uint8_t *)"";
	
	convert_to_utf8_header("Subject", mime_subject, address, mime_subject);
}

#pragma mark -

void convert_rcpt_iso_2022_jp(const char *header_name, CUTF8String& rcpt_name)
{
	C_TEXT temp;
	CUTF16String u16;
	
	CUTF8String display_name;
	CUTF8String address;
	parse_address(rcpt_name, display_name, address);
	
	temp.setUTF8String(&display_name);
	temp.copyUTF16String(&u16);
	
	convert_to_iso_2022_jp_header_b(header_name, u16, address, rcpt_name);
}

void convert_rcpt_shift_jis(const char *header_name, CUTF8String& rcpt_name)
{
	C_TEXT temp;
	CUTF16String u16;
	
	CUTF8String display_name;
	CUTF8String address;
	parse_address(rcpt_name, display_name, address);
	
	temp.setUTF8String(&display_name);
	temp.copyUTF16String(&u16);
	
	convert_to_shift_jis_header(header_name, u16, address, rcpt_name);
}

void convert_rcpt_windows_31j(const char *header_name, CUTF8String& rcpt_name)
{
	C_TEXT temp;
	CUTF16String u16;
	
	CUTF8String display_name;
	CUTF8String address;
	parse_address(rcpt_name, display_name, address);
	
	temp.setUTF8String(&display_name);
	temp.copyUTF16String(&u16);
	
	convert_to_windows_31j_header(header_name, u16, address, rcpt_name);
}

void convert_rcpt_utf8(const char *header_name, CUTF8String& rcpt_name)
{
	C_TEXT temp;
	CUTF16String u16;
	
	CUTF8String display_name;
	CUTF8String address;
	parse_address(rcpt_name, display_name, address);
	
	convert_to_utf8_header(header_name, display_name, address, rcpt_name);
}

#pragma mark -

void convert_body_iso_2022_jp(CUTF8String& mime_body)
{
	C_TEXT temp;
	CUTF16String u16;
	
	temp.setUTF8String(&mime_body);
	temp.copyUTF16String(&u16);
	
	convert_to_iso_2022_jp(u16, mime_body);
}

void convert_body_shift_jis(CUTF8String& mime_body)
{
	C_TEXT temp;
	CUTF16String u16;
	
	temp.setUTF8String(&mime_body);
	temp.copyUTF16String(&u16);
	
	convert_to_shift_jis(u16, mime_body);
}

void convert_body_windows_31j(CUTF8String& mime_body)
{
	C_TEXT temp;
	CUTF16String u16;
	
	temp.setUTF8String(&mime_body);
	temp.copyUTF16String(&u16);
	
	convert_to_windows_31j(u16, mime_body);
}

#pragma mark -

void convert_rcpt(int smtp_charset_type, const char *header_name, CUTF8String& rcpt_name)
{
	switch(smtp_charset_type)
	{
		case smtp_charset_type_iso_2022_jp:
			convert_rcpt_iso_2022_jp(header_name, rcpt_name);
			break;
			
		case smtp_charset_type_shift_jis:
			convert_rcpt_shift_jis(header_name, rcpt_name);
			break;
			
		case smtp_charset_type_windows_31j:
			convert_rcpt_windows_31j(header_name, rcpt_name);
			break;
			
		case smtp_charset_type_utf_8:
			convert_rcpt_utf8(header_name, rcpt_name);
			break;
	}
	PA_YieldAbsolute();
}

void convert_body(int smtp_charset_type, CUTF8String& mime_body, CUTF8String& mime_subject)
{
	switch(smtp_charset_type)
	{
		case smtp_charset_type_iso_2022_jp:
			convert_body_iso_2022_jp(mime_body);
			convert_subject_iso_2022_jp(mime_subject);
			break;
			
		case smtp_charset_type_shift_jis:
			convert_body_shift_jis(mime_body);
			convert_subject_shift_jis(mime_subject);
			break;
			
		case smtp_charset_type_windows_31j:
			convert_body_windows_31j(mime_body);
			convert_subject_windows_31j(mime_subject);
			break;

		case smtp_charset_type_utf_8:
			convert_subject_utf8(mime_subject);
			break;
	}
	PA_YieldAbsolute();
}

#pragma mark Helper

int parse_address(
									CUTF8String& string,
									CUTF8String& display_name,
									CUTF8String& address)
{
	int res = MAILIMF_NO_ERROR;
	
	size_t index = 0;
	mailimf_address *addr;
	if((res = mailimf_address_parse((const char *)string.c_str(),
																	string.length(),
																	&index,
																	&addr)) == MAILIMF_NO_ERROR)
	{
		if(addr->ad_type == MAILIMF_ADDRESS_MAILBOX)
		{
			address = (const uint8_t *)(addr->ad_data.ad_mailbox->mb_addr_spec ? addr->ad_data.ad_mailbox->mb_addr_spec : "");
			display_name = (const uint8_t *)(addr->ad_data.ad_mailbox->mb_display_name ? addr->ad_data.ad_mailbox->mb_display_name : "");
		}else
		{
			//MAILIMF_ADDRESS_GROUP is not supported for now
			res = MAILIMF_ERROR_PARSE;
		}
	}
	return res;
}

#pragma mark Result

// ------------------------------------- SMTP -------------------------------------

void result_rcpt(cJSON *result, int ret, const char *rcpt, const uint8_t *address)
{
	cJSON *r = cJSON_CreateObject();
	cJSON_AddStringToObject(r, "operation", "rcpt");
	cJSON_AddStringToObject(r, rcpt, (char *)address);
	cJSON_AddStringToObject(r, "library_error", mailsmtp_strerror(ret));
	cJSON_AddNumberToObject(r, "library_error_code", ret);
	cJSON_AddItemToArray(result, r);
	
	PA_YieldAbsolute();
}

void result_data(cJSON *result, int ret, CUTF8String& messsage_string)
{
	cJSON *r = cJSON_CreateObject();
	cJSON_AddStringToObject(r, "operation", "data");
	cJSON_AddNumberToObject(r, "size", messsage_string.size());
	cJSON_AddStringToObject(r, "library_error", mailsmtp_strerror(ret));
	cJSON_AddNumberToObject(r, "library_error_code", ret);
	cJSON_AddItemToArray(result, r);
	
	PA_YieldAbsolute();
}

void result_connect(cJSON *result, int ret, int smtp_ssl, const char *smtp_server, uint16_t smtp_port)
{
	cJSON *r = cJSON_CreateObject();
	cJSON_AddStringToObject(r, "operation", "connection");
	cJSON_AddBoolToObject(r, "ssl", smtp_ssl);
	cJSON_AddStringToObject(r, "host", smtp_server);
	cJSON_AddNumberToObject(r, "port", smtp_port);
	cJSON_AddStringToObject(r, "library_error", mailsmtp_strerror(ret));
	cJSON_AddNumberToObject(r, "library_error_code", ret);
	cJSON_AddItemToArray(result, r);
	
	PA_YieldAbsolute();
}

void result_login(cJSON *result, int ret, int smtp_tls, int smtp_allow_insecure)
{
	cJSON *r = cJSON_CreateObject();
	cJSON_AddStringToObject(r, "operation", "identification");
	cJSON_AddBoolToObject(r, "tls", smtp_tls);
	cJSON_AddBoolToObject(r, "allow_insecure", smtp_allow_insecure);
	cJSON_AddStringToObject(r, "library_error", mailsmtp_strerror(ret));
	cJSON_AddNumberToObject(r, "library_error_code", ret);
	cJSON_AddItemToArray(result, r);
	
	PA_YieldAbsolute();
}

void result_auth(cJSON *result,
								 int ret,
								 CUTF8String& smtp_authentication,
								 smtp_auth_type auth_type,
								 const char *oauth2_access_token,
								 const char *smtp_server,
								 int smtp_tls)
{
	cJSON *r = cJSON_CreateObject();
	cJSON_AddStringToObject(r, "operation", "authentication");
	cJSON_AddStringToObject(r, "method", (char *)smtp_authentication.c_str());
	
	if((auth_type==smtp_auth_type_oauth2_gmail)||(auth_type==smtp_auth_type_oauth2_outlook))
	{
		cJSON_AddStringToObject(r, "oauth2_access_token", oauth2_access_token);
	}else
	{
		cJSON_AddStringToObject(r, "server", smtp_server);
	}
	
	cJSON_AddBoolToObject(r, "tls", smtp_tls);
	cJSON_AddStringToObject(r, "library_error", mailsmtp_strerror(ret));
	cJSON_AddNumberToObject(r, "library_error_code", ret);
	cJSON_AddItemToArray(result, r);
	
	PA_YieldAbsolute();
}

void result_mail(cJSON *result, int ret, CUTF8String& sender_address)
{
	cJSON *r = cJSON_CreateObject();
	cJSON_AddStringToObject(r, "operation", "mail");
	cJSON_AddStringToObject(r, "from", (char *)sender_address.c_str());
	cJSON_AddStringToObject(r, "library_error", mailsmtp_strerror(ret));
	cJSON_AddNumberToObject(r, "library_error_code", ret);
	cJSON_AddItemToArray(result, r);
	
	PA_YieldAbsolute();
}

#pragma mark Log

typedef struct
{
	int total;
	int index;
	const PA_Unichar *context;
	size_t context_size;
	PA_long32 method_id;
	const PA_Unichar *method;
	size_t method_size;
}smtp_ctx;

void mail_logger(mailsmtp *session, int log_type, const char *str, size_t size, void *context)
{
	smtp_ctx *ctx = (smtp_ctx *)context;
	
	if((ctx->method_size) && (!PA_IsProcessDying()))
	{
		switch (log_type)
		{
			case 5://write
			case 6:
			case 7:
			{
				if(ctx->method_id)
				{
					PA_Variable	params[4];
					params[0] = PA_CreateVariable(eVK_Longint);
					params[1] = PA_CreateVariable(eVK_Longint);
					PA_SetLongintVariable(&params[0], ctx->index);
					PA_SetLongintVariable(&params[1], ctx->total);
					
					params[2] = PA_CreateVariable(eVK_Unistring);
					C_TEXT smtp;
					smtp.setUTF8String((const uint8_t *)str, size);
					PA_Unistring smtp_log = PA_CreateUnistring((PA_Unichar *)smtp.getUTF16StringPtr());
					PA_SetStringVariable(&params[2], &smtp_log);
					
					params[3] = PA_CreateVariable(eVK_Unistring);
					PA_Unistring json = PA_CreateUnistring((PA_Unichar *)ctx->context);
					PA_SetStringVariable(&params[3], &json);
					
					PA_ExecuteMethodByID(ctx->method_id, params, 4);
					
					PA_ClearVariable(&params[0]);
					PA_ClearVariable(&params[1]);
					PA_ClearVariable(&params[2]);
					PA_ClearVariable(&params[3]);
				}
				else
				{
					PA_Variable	params[6];
					params[1] = PA_CreateVariable(eVK_Longint);
					params[2] = PA_CreateVariable(eVK_Longint);
					params[3] = PA_CreateVariable(eVK_Longint);
					PA_SetLongintVariable(&params[2], ctx->index);
					PA_SetLongintVariable(&params[3], ctx->total);
					
					params[0] = PA_CreateVariable(eVK_Unistring);
					PA_Unistring method = PA_CreateUnistring((PA_Unichar *)ctx->method);
					PA_SetStringVariable(&params[0], &method);

					params[4] = PA_CreateVariable(eVK_Unistring);
					C_TEXT smtp;
					smtp.setUTF8String((const uint8_t *)str, size);
					PA_Unistring smtp_log = PA_CreateUnistring((PA_Unichar *)smtp.getUTF16StringPtr());
					PA_SetStringVariable(&params[4], &smtp_log);
					
					params[5] = PA_CreateVariable(eVK_Unistring);
					PA_Unistring json = PA_CreateUnistring((PA_Unichar *)ctx->context);
					PA_SetStringVariable(&params[5], &json);
					
					PA_ExecuteCommandByID(1007, params, 6);
					
					PA_ClearVariable(&params[0]);
					PA_ClearVariable(&params[1]);
					PA_ClearVariable(&params[2]);
					PA_ClearVariable(&params[3]);
					PA_ClearVariable(&params[4]);
					PA_ClearVariable(&params[5]);
				}
			}
				break;
		}
	}
	PA_YieldAbsolute();
}

#pragma mark -

void etpan_smtp_send(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT P1_params;
	C_TEXT P2_mimes;
	C_TEXT P3_callback_method;
	C_TEXT returnValue;
	
	P1_params.fromParamAtIndex(pParams, 1);
	P2_mimes.fromParamAtIndex(pParams, 2);
	P3_callback_method.fromParamAtIndex(pParams, 3);
	
	//P1_params
	CUTF8String params_json;
	P1_params.copyUTF8String(&params_json);
	
	cJSON *result = cJSON_CreateObject();
	cJSON *messageInfo = cJSON_CreateArray();//no need to release, given to result
	cJSON *sessionInfo = cJSON_CreateObject();//no need to release, given to result
	cJSON *params = cJSON_Parse((const char *)params_json.c_str());
	
	if(params)
	{
		//P2_mimes
		CUTF8String mimes_json;
		P2_mimes.copyUTF8String(&mimes_json);
		cJSON *mimes = cJSON_Parse((const char *)mimes_json.c_str());
		if(mimes)
		{
			if(cJSON_IsArray(mimes))
			{
				smtp_ctx ctx;
				ctx.index = 0;
				ctx.total = cJSON_GetArraySize(mimes);
				ctx.method_id = 0;
				//P3_callback_method
				ctx.method = P3_callback_method.getUTF16StringPtr();
				ctx.method_size = P3_callback_method.getUTF16Length();
				ctx.method_id = PA_GetMethodID((PA_Unichar *)ctx.method);
				CUTF8String contextInfo;
				
				cJSON *context = cJSON_GetObjectItem(params, "context");
				if(cJSON_IsObject(context))
				{
					contextInfo = CUTF8String((const uint8_t *)cJSON_PrintUnformatted(context));
				}
				ctx.context_size = contextInfo.length();
				C_TEXT contextJson;
				contextJson.setUTF8String(&contextInfo);
				ctx.context = contextJson.getUTF16StringPtr();
				
				cJSON *sessionDetails = cJSON_CreateArray();
				
				cJSON *user = cJSON_GetObjectItem(params, "user");
				char *smtp_user = cJSON_IsString(user) ? user->valuestring : (char *)"";
				
				cJSON *pass = cJSON_GetObjectItem(params, "pass");
				char *smtp_password = cJSON_IsString(pass) ? pass->valuestring : (char *)"";
				
				cJSON *port = cJSON_GetObjectItem(params, "port");
				uint16_t smtp_port = cJSON_IsNumber(port) ? port->valueint : 25;
				
				cJSON *tls = cJSON_GetObjectItem(params, "tls");
				int smtp_tls = cJSON_IsNumber(tls) ? (!!tls->valueint) : 1;
				int smtp_ssl = (!smtp_tls);
				
				cJSON *allowInsecure = cJSON_GetObjectItem(params, "allowInsecure");
				int smtp_allow_insecure = cJSON_IsNumber(allowInsecure) ? (!!allowInsecure->valueint) : 0;
				
				cJSON *timeout = cJSON_GetObjectItem(params, "timeout");
				time_t smtp_timeout = cJSON_IsNumber(timeout) ? timeout->valueint : 0;
				
				cJSON *host = cJSON_GetObjectItem(params, "host");
				char *smtp_server = cJSON_IsString(host) ? host->valuestring : (char *)"localhost";
				
				cJSON *sender = cJSON_GetObjectItem(params, "sender");
				CUTF8String smtp_sender_name, sender_address, smtp_sender = (const uint8_t *)(cJSON_IsString(sender) ? sender->valuestring : "");
				if(MAILIMF_NO_ERROR != parse_address(smtp_sender, smtp_sender_name, sender_address)) sender_address = smtp_sender;
				
				cJSON *accessToken = cJSON_GetObjectItem(params, "accessToken");
				char *oauth2_access_token = cJSON_IsString(accessToken) ? accessToken->valuestring : (char *)"";
				
				cJSON *authentication = cJSON_GetObjectItem(params, "authentication");
				CUTF8String smtp_authentication = (const uint8_t *)(cJSON_IsString(authentication) ? authentication->valuestring : "");
				
				smtp_auth_type auth_type = smtp_auth_type_auto;
				
				if(!strcasecmp((char *)smtp_authentication.c_str(), "DIGEST-MD5"))
				{
					auth_type = smtp_auth_type_digest;
				}else if(!strcasecmp((char *)smtp_authentication.c_str(), "CRAM-MD5"))
				{
					auth_type = smtp_auth_type_cram;
				}else if(!strcasecmp((char *)smtp_authentication.c_str(), "LOGIN"))
				{
					auth_type = smtp_auth_type_login;
				}else if(!strcasecmp((char *)smtp_authentication.c_str(), "PLAIN"))
				{
					auth_type = smtp_auth_type_plain;
				}else if(!strcasecmp((char *)smtp_authentication.c_str(), "GMAIL"))
				{
					auth_type = smtp_auth_type_oauth2_gmail;
				}else if(!strcasecmp((char *)smtp_authentication.c_str(), "OUTLOOK"))
				{
					auth_type = smtp_auth_type_oauth2_outlook;
				}else if(!strcasecmp((char *)smtp_authentication.c_str(), "KERBEROS_V4"))
				{
					auth_type = smtp_auth_type_kerberos_v4;
				}else if(!strcasecmp((char *)smtp_authentication.c_str(), "GSSAPI"))
				{
					auth_type = smtp_auth_type_gssapi;
				}else if(!strcasecmp((char *)smtp_authentication.c_str(), "SRP"))
				{
					auth_type = smtp_auth_type_srp;
				}else if(!strcasecmp((char *)smtp_authentication.c_str(), "NTLM"))
				{
					auth_type = smtp_auth_type_ntlm;
				}
				
				PA_YieldAbsolute();
				
				//internal flags
				int ret = MAILSMTP_NO_ERROR;
				int esmtp = 0;
				
				mailsmtp *smtp = NULL;
				smtp = mailsmtp_new(0, NULL);
				
				if(smtp)
				{
					mailsmtp_set_timeout(smtp, smtp_timeout);
					
					void (*_mail_logger)(mailsmtp *, int, const char *, size_t, void *) = mail_logger;
					mailsmtp_set_logger(smtp, _mail_logger, &ctx);
					
					if((ret = smtp_generic_connect(smtp, smtp_ssl, smtp_server, smtp_port) != MAILSMTP_NO_ERROR))
					{
						
					}
					
					result_connect(sessionDetails, ret, smtp_ssl, smtp_server, smtp_port);
					
					if((ret == MAILSMTP_NO_ERROR) && ((ret = smtp_generic_greeting(smtp, smtp_tls, smtp_allow_insecure, &esmtp) != MAILSMTP_NO_ERROR)))
					{
						
					}
					
					result_login(sessionDetails, ret, smtp_tls, smtp_allow_insecure);
					
					switch (auth_type)
					{
						case smtp_auth_type_digest:
							if((ret == MAILSMTP_NO_ERROR) && ((ret = smtp_auth_digest(smtp, smtp_tls, &esmtp, smtp_server, smtp_user, smtp_password) != MAILSMTP_NO_ERROR)))
							{
								
							}
							break;
						case smtp_auth_type_cram:
							if((ret == MAILSMTP_NO_ERROR) && ((ret = smtp_auth_cram(smtp, smtp_tls, &esmtp, smtp_server, smtp_user, smtp_password) != MAILSMTP_NO_ERROR)))
							{
								
							}
							break;
						case smtp_auth_type_login:
							if((ret == MAILSMTP_NO_ERROR) && ((ret = smtp_auth_login(smtp, smtp_tls, &esmtp, smtp_server, smtp_user, smtp_password) != MAILSMTP_NO_ERROR)))
							{
								
							}
							break;
						case smtp_auth_type_plain:
							if((ret == MAILSMTP_NO_ERROR) && ((ret = smtp_auth_plain(smtp, smtp_tls, &esmtp, smtp_server, smtp_user, smtp_password) != MAILSMTP_NO_ERROR)))
							{
								
							}
							break;
						case smtp_auth_type_oauth2_gmail:
							if((ret == MAILSMTP_NO_ERROR) && ((ret = smtp_auth_oauth2(smtp, smtp_user, oauth2_access_token) != MAILSMTP_NO_ERROR)))
							{
								
							}
							break;
						case smtp_auth_type_oauth2_outlook:
							if((ret == MAILSMTP_NO_ERROR) && ((ret = smtp_auth_oauth2_outlook(smtp, smtp_user, oauth2_access_token) != MAILSMTP_NO_ERROR)))
							{
								
							}
							break;
						case smtp_auth_type_ntlm:
							if((ret == MAILSMTP_NO_ERROR) && ((ret = smtp_auth_ntlm(smtp, smtp_tls, &esmtp, smtp_server, smtp_user, smtp_password) != MAILSMTP_NO_ERROR)))
							{
								
							}
							break;
						case smtp_auth_type_srp:
							if((ret == MAILSMTP_NO_ERROR) && ((ret = smtp_auth_srp(smtp, smtp_tls, &esmtp, smtp_server, smtp_user, smtp_password) != MAILSMTP_NO_ERROR)))
							{
								
							}
							break;
						case smtp_auth_type_gssapi:
							if((ret == MAILSMTP_NO_ERROR) && ((ret = smtp_auth_gss(smtp, smtp_tls, &esmtp, smtp_server, smtp_user, smtp_password) != MAILSMTP_NO_ERROR)))
							{
								
							}
							break;
						case smtp_auth_type_kerberos_v4:
							if((ret == MAILSMTP_NO_ERROR) && ((ret = smtp_auth_kerberos_v4(smtp, smtp_tls, &esmtp, smtp_server, smtp_user, smtp_password) != MAILSMTP_NO_ERROR)))
							{
								
							}
							break;
						default:
							if((ret == MAILSMTP_NO_ERROR) && ((ret = smtp_auth_auto(smtp, smtp_tls, &esmtp, smtp_server, smtp_user, smtp_password) != MAILSMTP_NO_ERROR)))
							{
								
							}
							break;
					}
					
					result_auth(sessionDetails, ret, smtp_authentication, auth_type, oauth2_access_token, smtp_server, smtp_tls);
					
					cJSON_AddBoolToObject(sessionInfo, "success", ret == MAILSMTP_NO_ERROR);
					cJSON_AddItemToObject(sessionInfo, "details", sessionDetails);
					
					if(ret == MAILSMTP_NO_ERROR)
					{
						for(int i = 0; i < ctx.total;++i)
						{
							ctx.index = (i+1);
							
							ret = MAILSMTP_NO_ERROR;
							
							cJSON *messageInfoItem = cJSON_CreateObject();
							cJSON *messageInfoLogs = cJSON_CreateArray();
							
							//MAIL FROM
							if ((ret = (esmtp
													?
													mailesmtp_mail(smtp, (char *)sender_address.c_str(), 1, NULL)
													/* mailesmtp_mail(smtp, (char *)sender_address.c_str(), 1, (char *)smtp_sender_name.c_str()) */
													:
													mailsmtp_mail(smtp, (char *)sender_address.c_str()))) != MAILSMTP_NO_ERROR)
							{
								
							}
							
							result_mail(messageInfoLogs, ret, sender_address);
							
							if(ret == MAILSMTP_NO_ERROR)
							{
								cJSON *item = cJSON_GetArrayItem(mimes, i);
								if(cJSON_IsObject(item))
								{
									cJSON *contentType = cJSON_GetObjectItem(item, "contentType");
									CUTF8String mime_content_type = (const uint8_t *)(cJSON_IsString(contentType) ? contentType->valuestring : "text/plain");
									
									cJSON *charset = cJSON_GetObjectItem(item, "charset");
									CUTF8String mime_charset = (const uint8_t *)(cJSON_IsString(charset) ? charset->valuestring : "utf-8");
									
									int mime_content_transfer_encoding = MAILMIME_MECHANISM_BASE64;
									int smtp_charset_type = smtp_charset_type_utf_8;
									
									if(!strcasecmp((char *)mime_charset.c_str(), "iso-2022-jp"))
									{
										mime_content_transfer_encoding = MAILMIME_MECHANISM_7BIT;
										smtp_charset_type = smtp_charset_type_iso_2022_jp;
									}else if(  !strcasecmp((char *)mime_charset.c_str(), "shift_jis")
													 ||!strcasecmp((char *)mime_charset.c_str(), "shift-jis"))
									{
										mime_content_transfer_encoding = MAILMIME_MECHANISM_BASE64;
										smtp_charset_type = smtp_charset_type_shift_jis;
									}else if(  !strcasecmp((char *)mime_charset.c_str(), "windows-31j")
													 ||!strcasecmp((char *)mime_charset.c_str(), "windows_31j")
													 ||!strcasecmp((char *)mime_charset.c_str(), "cp932"))
									{
										mime_content_transfer_encoding = MAILMIME_MECHANISM_BASE64;
										smtp_charset_type = smtp_charset_type_windows_31j;
									}
									
									cJSON *subject = cJSON_GetObjectItem(item, "subject");
									CUTF8String mime_subject = (const uint8_t *)(cJSON_IsString(subject) ? subject->valuestring : "");
									
									cJSON *body = cJSON_GetObjectItem(item, "body");
									CUTF8String mime_body = (const uint8_t *)(cJSON_IsString(body) ? body->valuestring : "");
									
									cJSON *from = cJSON_GetObjectItem(item, "from");
									std::vector<CUTF8String> from_name;
									
									if(cJSON_IsArray(from))
									{
										for(int j = 0; j < cJSON_GetArraySize(from);++j)
										{
											cJSON *rcpt = cJSON_GetArrayItem(from, j);
											if(cJSON_IsString(rcpt))
											{
												CUTF8String encoded_name = (const uint8_t *)rcpt->valuestring;
												convert_rcpt(smtp_charset_type, "From", encoded_name);
												from_name.push_back(encoded_name);
											}
										}
									}
									cJSON *to = cJSON_GetObjectItem(item, "to");
									std::vector<CUTF8String> to_name;
									
									if(cJSON_IsArray(to))
									{
										for(int j = 0; j < cJSON_GetArraySize(to);++j)
										{
											cJSON *rcpt = cJSON_GetArrayItem(to, j);
											if(cJSON_IsString(rcpt))
											{
												CUTF8String encoded_name = (const uint8_t *)rcpt->valuestring;
												convert_rcpt(smtp_charset_type, "To", encoded_name);
												to_name.push_back(encoded_name);
											}
										}
									}
									cJSON *cc = cJSON_GetObjectItem(item, "cc");
									std::vector<CUTF8String> cc_name;
									
									if(cJSON_IsArray(cc))
									{
										for(int j = 0; j < cJSON_GetArraySize(cc);++j)
										{
											cJSON *rcpt = cJSON_GetArrayItem(cc, j);
											if(cJSON_IsString(rcpt))
											{
												CUTF8String encoded_name = (const uint8_t *)rcpt->valuestring;
												convert_rcpt(smtp_charset_type, "Cc", encoded_name);
												cc_name.push_back(encoded_name);
											}
										}
									}
									cJSON *bcc = cJSON_GetObjectItem(item, "bcc");
									std::vector<CUTF8String> bcc_name;
									
									if(cJSON_IsArray(bcc))
									{
										for(int j = 0; j < cJSON_GetArraySize(bcc);++j)
										{
											cJSON *rcpt = cJSON_GetArrayItem(bcc, j);
											if(cJSON_IsString(rcpt))
											{
												CUTF8String encoded_name = (const uint8_t *)rcpt->valuestring;
												convert_rcpt(smtp_charset_type, "Bcc", encoded_name);
												bcc_name.push_back(encoded_name);
											}
										}
									}
									cJSON *replyTo = cJSON_GetObjectItem(item, "replyTo");
									std::vector<CUTF8String> reply_to_name;
									
									if(cJSON_IsArray(replyTo))
									{
										for(int j = 0; j < cJSON_GetArraySize(replyTo);++j)
										{
											cJSON *rcpt = cJSON_GetArrayItem(replyTo, j);
											if(cJSON_IsString(rcpt))
											{
												CUTF8String encoded_name = (const uint8_t *)rcpt->valuestring;
												convert_rcpt(smtp_charset_type, "Reply-To", encoded_name);
												reply_to_name.push_back(encoded_name);
											}
										}
									}
									
									CUTF8String messsage_string;
									
									convert_body(smtp_charset_type, mime_body, mime_subject);
									
									mime_create_main_content(mime_subject,
																					 from_name,
																					 to_name,
																					 cc_name,
																					 bcc_name,
																					 reply_to_name,
																					 mime_content_transfer_encoding,
																					 mime_content_type,
																					 mime_charset,
																					 mime_body,
																					 messsage_string);
									
									char *data = (char *)messsage_string.c_str();
									size_t len = messsage_string.length();
									
									//RCPT TO
									for (std::vector<CUTF8String>::iterator it = to_name.begin() ; it != to_name.end(); ++it)
									{
										
										CUTF8String rcpt_name, rcpt_address, rcpt = (const uint8_t *)it->c_str();
										if(MAILIMF_NO_ERROR == parse_address(rcpt, rcpt_name, rcpt_address))
										{
											ret = esmtp
											?
											(mailesmtp_rcpt(smtp, (char *)rcpt_address.c_str(), MAILSMTP_DSN_NOTIFY_FAILURE|MAILSMTP_DSN_NOTIFY_DELAY, NULL))
											:
											(mailsmtp_rcpt(smtp, (char *)rcpt_address.c_str()));
											result_rcpt(messageInfoLogs, ret, "to", rcpt_address.c_str());
										}
									}
									
									for (std::vector<CUTF8String>::iterator it = cc_name.begin() ; it != cc_name.end(); ++it)
									{
										CUTF8String rcpt_name, rcpt_address, rcpt = (const uint8_t *)it->c_str();
										if(MAILIMF_NO_ERROR == parse_address(rcpt, rcpt_name, rcpt_address))
										{
											ret = esmtp
											?
											(mailesmtp_rcpt(smtp, (char *)rcpt_address.c_str(), MAILSMTP_DSN_NOTIFY_FAILURE|MAILSMTP_DSN_NOTIFY_DELAY, NULL))
											:
											(mailsmtp_rcpt(smtp, (char *)rcpt_address.c_str()));
											result_rcpt(messageInfoLogs, ret, "cc", rcpt_address.c_str());
										}
									}
									
									for (std::vector<CUTF8String>::iterator it = bcc_name.begin() ; it != bcc_name.end(); ++it)
									{
										CUTF8String rcpt_name, rcpt_address, rcpt = (const uint8_t *)it->c_str();
										if(MAILIMF_NO_ERROR == parse_address(rcpt, rcpt_name, rcpt_address))
										{
											ret = esmtp
											?
											(mailesmtp_rcpt(smtp, (char *)rcpt_address.c_str(), MAILSMTP_DSN_NOTIFY_FAILURE|MAILSMTP_DSN_NOTIFY_DELAY, NULL))
											:
											(mailsmtp_rcpt(smtp, (char *)rcpt_address.c_str()));
											result_rcpt(messageInfoLogs, ret, "bcc", rcpt_address.c_str());
										}
									}
									
									//clear errors generated in the loop above
									ret = MAILSMTP_NO_ERROR;
									
									//DATA
									if((ret == MAILSMTP_NO_ERROR) && ((ret = mailsmtp_data(smtp)) == MAILSMTP_NO_ERROR))
									{
										ret = mailsmtp_data_message(smtp, data, len);
										result_data(messageInfoLogs, ret, messsage_string);
									}
									
									cJSON_AddBoolToObject(messageInfoItem, "success", ret == MAILSMTP_NO_ERROR);
									cJSON_AddItemToObject(messageInfoItem, "details", messageInfoLogs);
									cJSON_AddItemToArray(messageInfo, messageInfoItem);
									
									mailsmtp_reset(smtp);
								}
							}
						}
					}
					mailsmtp_free(smtp);
				}
			}
			cJSON_Delete(mimes);
		}
		cJSON_Delete(params);
	}

	cJSON_AddItemToObject(result, "messages", messageInfo);
	cJSON_AddItemToObject(result, "session", sessionInfo);
	
	CUTF8String json;
	json = CUTF8String((const uint8_t *)cJSON_PrintUnformatted(result));
	returnValue.setUTF8String(&json);

	cJSON_Delete(result);

	returnValue.setReturn(pResult);
}

/*
void etpan_mime_attachments(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;
#ifndef PLUGIN_SDK_v11
	PA_Variable P1_data = *((PA_Variable*) pParams[0]);//$1
	if(P1_data.fType == eVK_ArrayBlob)
	{
		PA_long32 count = PA_GetArrayNbElements(P1_data);
		ARRAY_LONGINT P2_content_transfer_encoding;
		ARRAY_TEXT P3_content_type;
		ARRAY_TEXT P4_charset;
		ARRAY_TEXT P5_filename;
		ARRAY_TEXT P6_content_id;

		P2_content_transfer_encoding.fromParamAtIndex(pParams, 2);
		P3_content_type.fromParamAtIndex(pParams, 3);
		P4_charset.fromParamAtIndex(pParams, 4);
		P5_filename.fromParamAtIndex(pParams, 5);
		P6_content_id.fromParamAtIndex(pParams, 6);
		
		if  ((P2_content_transfer_encoding.getSize() == count)
			&& (P3_content_type.getSize() == count)
			&& (P4_charset.getSize() == count)
			&& (P5_filename.getSize() == count)
			&& (P6_content_id.getSize() == count))
		{
			for(unsigned int i = 0; i < count;++i)
			{
				PA_Blob blob = PA_GetBlobInArray(P1_data, i);
				C_BLOB mime_data;
				void *blob_buf = (void *)PA_LockHandle(blob.fHandle);
				PA_long32 blob_len = blob.fSize;
				mime_data.setBytes((const uint8_t *)blob_buf, blob_len);
				PA_UnlockHandle(blob.fHandle);
				CUTF8String messsage_string;
				CUTF8String charset_string, content_type_string;
				CUTF8String filename_string, content_id_string;
				int content_transfer_encoding = get_mechanism(P2_content_transfer_encoding.getIntValueAtIndex(i));
				P3_content_type.copyUTF8StringAtIndex(&content_type_string, i);
				P4_charset.copyUTF8StringAtIndex(&charset_string, i);
				P5_filename.copyUTF8StringAtIndex(&filename_string, i);
				P6_content_id.copyUTF8StringAtIndex(&content_id_string, i);
			}
		}
	}
#endif
	
	returnValue.setReturn(pResult);
}
*/

// ------------------------------------- etpan ------------------------------------

//build header
void mime_create_main_content
(CUTF8String& subject_string,
 std::vector<CUTF8String>& from_name,
 std::vector<CUTF8String>& to_name,
 std::vector<CUTF8String>& cc_name,
 std::vector<CUTF8String>& bcc_name,
 std::vector<CUTF8String>& reply_to_name,
 int MAILMIME_MECHANISM,
 CUTF8String& content_type,
 CUTF8String& charset,
 CUTF8String& body_string,
 CUTF8String& messsage_string)
{
	struct mailimf_mailbox_list *from = NULL;
	struct mailimf_address_list *reply_to = NULL;
	struct mailimf_address_list *to = NULL;
	struct mailimf_address_list *cc = NULL;
	struct mailimf_address_list *bcc = NULL;
	struct mailimf_fields *fields = NULL;
	struct mailmime *mime = NULL;
	struct mailmime_fields *mime_fields = NULL;
	struct mailmime_content *content = NULL;
	struct mailmime_parameter *param = NULL;
	struct mailmime *mime_text_part = NULL;
	char * subject = NULL;
	
	if((subject = strdup((const char *)subject_string.c_str())))
	{
		if((from = mailimf_mailbox_list_new_empty()))
		{
			for (std::vector<CUTF8String>::iterator it = from_name.begin() ; it != from_name.end(); ++it)
				mailimf_mailbox_list_add_parse(from, (char *)it->c_str());

			if((to = mailimf_address_list_new_empty()))
			{
				for (std::vector<CUTF8String>::iterator it = to_name.begin() ; it != to_name.end(); ++it)
					mailimf_address_list_add_parse(to, (char *)it->c_str());
			
				if((cc = mailimf_address_list_new_empty()))
				{
					for (std::vector<CUTF8String>::iterator it = cc_name.begin() ; it != cc_name.end(); ++it)
						mailimf_address_list_add_parse(cc, (char *)it->c_str());
					
					if((bcc = mailimf_address_list_new_empty()))
					{
						for (std::vector<CUTF8String>::iterator it = bcc_name.begin() ; it != bcc_name.end(); ++it)
							mailimf_address_list_add_parse(bcc, (char *)it->c_str());
						
						if((reply_to = mailimf_address_list_new_empty()))
						{
							for (std::vector<CUTF8String>::iterator it = reply_to_name.begin() ; it != reply_to_name.end(); ++it)
								mailimf_address_list_add_parse(reply_to, (char *)it->c_str());
					
							if((fields = mailimf_fields_new_with_data(from_name.size() ? from : NULL,
																												NULL /* sender */,
																												reply_to_name.size() ? reply_to : NULL,
																												to_name.size() ? to : NULL,
																												cc_name.size() ? cc : NULL,
																												bcc_name.size() ? bcc: NULL,
																												NULL /* in-reply-to */,
																												NULL /* references */,
																												subject)))
								 {
									 if((mime = mailmime_new_message_data(NULL)))
									 {
										 mailmime_set_imf_fields(mime, fields);

										 if((mime_fields = mailmime_fields_new_encoding(MAILMIME_MECHANISM)))
										 {
											 if((content = mailmime_content_new_with_str((char *)content_type.c_str())))
											 {
												 if((param = mailmime_param_new_with_data((char *)"charset", (char *)charset.c_str())))
												 {
													 if(0 <= clist_append(content->ct_parameters, param))
													 {
														 if((mime_text_part = mailmime_new_empty(content, mime_fields)))
														 {
															 if(MAILIMF_NO_ERROR == mailmime_set_body_text(mime_text_part, (char *)body_string.c_str(), body_string.size()))
															 {
																 if(MAILIMF_NO_ERROR == mailmime_smart_add_part(mime, mime_text_part))
																 {
																	 int col = 0;
																	 MMAPString *buf = mmap_string_new("");
																	 if(MAILIMF_NO_ERROR == mailmime_write_mem(buf, &col, mime))
																	 {
																		 messsage_string = CUTF8String((const uint8_t *)buf->str, buf->len);
																	 }
																	 mmap_string_free(buf);
																 }
															 }else
															 {//failed:mailmime_set_body_text
																 mailmime_free(mime_text_part);
															 }
														 }else
														 {//failed:mailmime_new_empty
															 mailmime_content_free(content);
														 }
													 }else
													 {//failed:clist_append
														 mailmime_parameter_free(param);
													 }
												 }else
												 {//failed:mailmime_param_new_with_data
													 mailmime_content_free(content);
												 }
											 }else
											 {//failed:mailmime_content_new_with_str
												 mailmime_fields_free(mime_fields);
											 }
										 }else
										 {//failed:mailmime_fields_new_encoding
											 
										 }
										 mailmime_free(mime);
									 }
								 }else
								 {//failed:fields
									 mailimf_address_list_free(reply_to);
								 }
						}else
						{//failed:reply_to
							mailimf_address_list_free(bcc);
						}
					}else
					{//failed:bcc
						mailimf_address_list_free(cc);
					}
				}else
				{//failed:cc
					mailimf_address_list_free(to);
				}
			}else
			{//failed:to
				mailimf_mailbox_list_free(from);
			}
		}else
		{//failed:from
			free(subject);
		}
	}
}

#pragma mark Connect

int smtp_generic_connect(mailsmtp *smtp, int smtp_ssl, char *smtp_server, uint16_t smtp_port)
{
	int ret = MAILSMTP_NO_ERROR;
	
	if(smtp_ssl)
	{
		//use SMTP over SSL
		ret = mailsmtp_ssl_connect(smtp, smtp_server, smtp_port);
		
	}else
	{
		// use STARTTLS
		ret = mailsmtp_socket_connect(smtp, smtp_server, smtp_port);
	}
	return ret;
}

int smtp_generic_greeting(mailsmtp *smtp, int smtp_tls, int smtp_allow_insecure, int *esmtp)
{
	int ret = MAILSMTP_NO_ERROR;
	
	//EHLO
	if((ret = mailesmtp_ehlo(smtp)) == MAILSMTP_NO_ERROR)
	{
		*esmtp = 1;
		if((smtp_tls) && (!smtp_allow_insecure))
		{//STARTTLS
			if((ret = mailsmtp_socket_starttls(smtp)) == MAILSMTP_NO_ERROR)
			{//TLS/EHLO
				if((ret = mailesmtp_ehlo(smtp)) == MAILSMTP_NO_ERROR)
				{
					//TLS/OK
				}else if(ret == MAILSMTP_ERROR_NOT_IMPLEMENTED)
				{//TLS/HELO
					*esmtp = 0;
					ret = mailsmtp_helo(smtp);
				}
			}
		}
	}else if(ret == MAILSMTP_ERROR_NOT_IMPLEMENTED)
	{
		if((!smtp_tls) || (smtp_allow_insecure))
		{//HELO
			ret = mailsmtp_helo(smtp);
		}
	}

	return ret;
}

#pragma mark Auth

int smtp_auth(mailsmtp *smtp, const char *method, char *smtp_server, char *smtp_user, char *smtp_password)
{
	return mailesmtp_auth_sasl(smtp,
														 method,
														 smtp_server,
														 NULL,
														 NULL,
														 smtp_user,
														 smtp_user,
														 smtp_password,
														 NULL);
}

int smtp_auth_auto(mailsmtp *smtp, int smtp_tls, int *esmtp, char *smtp_server, char *smtp_user, char *smtp_password)
{
	int ret = MAILSMTP_NO_ERROR;
	
	if((ret = smtp_auth(smtp, "DIGEST-MD5", smtp_server, smtp_user, smtp_password) != MAILSMTP_NO_ERROR))
	{
		//try again with different auth method
		if((ret = smtp_generic_greeting(smtp, smtp_tls, 0, esmtp) != MAILSMTP_NO_ERROR))
		{
			if((ret = smtp_auth(smtp, "CRAM-MD5", smtp_server, smtp_user, smtp_password) != MAILSMTP_NO_ERROR))
			{
				//try again with different auth method
				if((ret = smtp_generic_greeting(smtp, smtp_tls, 0, esmtp) != MAILSMTP_NO_ERROR))
				{
					if((ret = smtp_auth(smtp, "LOGIN", smtp_server, smtp_user, smtp_password) != MAILSMTP_NO_ERROR))
					{
						//try again with different auth method
						if((ret = smtp_generic_greeting(smtp, smtp_tls, 0, esmtp) != MAILSMTP_NO_ERROR))
						{
							ret = smtp_auth(smtp, "PLAIN", smtp_server, smtp_user, smtp_password);
						}
					}
				}
			}
		}
	}
	return ret;
}

int smtp_auth_login(mailsmtp *smtp, int smtp_tls, int *esmtp, char *smtp_server, char *smtp_user, char *smtp_password)
{
	return smtp_auth(smtp, "LOGIN", smtp_server, smtp_user, smtp_password);
}

int smtp_auth_plain(mailsmtp *smtp, int smtp_tls, int *esmtp, char *smtp_server, char *smtp_user, char *smtp_password)
{
	return smtp_auth(smtp, "PLAIN", smtp_server, smtp_user, smtp_password);
}

int smtp_auth_cram(mailsmtp *smtp, int smtp_tls, int *esmtp, char *smtp_server, char *smtp_user, char *smtp_password)
{
	return smtp_auth(smtp, "CRAM-MD5", smtp_server, smtp_user, smtp_password);
}

int smtp_auth_digest(mailsmtp *smtp, int smtp_tls, int *esmtp, char *smtp_server, char *smtp_user, char *smtp_password)
{
	return smtp_auth(smtp, "DIGEST-MD5", smtp_server, smtp_user, smtp_password);
}

int smtp_auth_ntlm(mailsmtp *smtp, int smtp_tls, int *esmtp, char *smtp_server, char *smtp_user, char *smtp_password)
{
	return smtp_auth(smtp, "NTLM", smtp_server, smtp_user, smtp_password);
}

int smtp_auth_srp(mailsmtp *smtp, int smtp_tls, int *esmtp, char *smtp_server, char *smtp_user, char *smtp_password)
{
	return smtp_auth(smtp, "SRP", smtp_server, smtp_user, smtp_password);
}

int smtp_auth_gss(mailsmtp *smtp, int smtp_tls, int *esmtp, char *smtp_server, char *smtp_user, char *smtp_password)
{
	return smtp_auth(smtp, "GSSAPI", smtp_server, smtp_user, smtp_password);
}

int smtp_auth_kerberos_v4(mailsmtp *smtp, int smtp_tls, int *esmtp, char *smtp_server, char *smtp_user, char *smtp_password)
{
	return smtp_auth(smtp, "KERBEROS_V4", smtp_server, smtp_user, smtp_password);
}

int smtp_auth_oauth2(mailsmtp *smtp, char *smtp_user, char *oauth2_access_token)
{
	return mailsmtp_oauth2_authenticate(smtp, smtp_user, oauth2_access_token);
}

int smtp_auth_oauth2_outlook(mailsmtp *smtp, char *smtp_user, char *oauth2_access_token)
{
	return mailsmtp_oauth2_outlook_authenticate(smtp, smtp_user, oauth2_access_token);
}
